type MaskNode = CharacterMaskNode | SeparatorMaskNode;
type CharacterMaskNode = {
    type: 'character';
    pattern: RegExp;
    value: string | undefined;
    placeholder: string;
};
type SeparatorMaskNode = {
    type: 'separator';
    value: string;
};
type State = {
    value: MaskNode[];
    cursorOffset: number;
};
export type UseMaskInputStateProps = {
    /**
     * Initial value to display in a text input.
     */
    defaultValue?: string;
    /**
     * Mask that input must conform to.
     */
    mask: string;
    /**
     * Text to display when `value` is empty.
     */
    placeholder?: string;
    /**
     * Callback when value updates.
     */
    onChange?: (value: string) => void;
    /**
     * Callback when `Enter` is pressed. First argument is a value of the input.
     */
    onSubmit?: (value: string) => void;
};
export type MaskInputState = State & {
    /**
     * Move cursor to the left.
     */
    moveCursorLeft: () => void;
    /**
     * Move cursor to the right.
     */
    moveCursorRight: () => void;
    /**
     * Insert text.
     */
    insert: (text: string) => void;
    /**
     * Delete character.
     */
    delete: () => void;
    /**
     * Submit input value.
     */
    submit: () => void;
};
export declare const useMaskInputState: ({ defaultValue, mask, placeholder, onChange, onSubmit, }: UseMaskInputStateProps) => MaskInputState;
export {};
