type State = {
    /**
     * Number of visible rows.
     */
    visibleRowCount: number;
    /**
     * Total number of rows.
     */
    size: number;
    /**
     * Index of the currently focused row.
     */
    focusedIndex: number;
    /**
     * Index of the first visible row.
     */
    visibleFromIndex: number;
    /**
     * Index of the last visible row.
     */
    visibleToIndex: number;
};
export type UseTableStateProps = {
    /**
     * Number of visible rows.
     *
     * @default 5
     */
    visibleRowCount?: number;
    /**
     * Rows.
     */
    rows: Array<Record<string, unknown>>;
};
export type Row = {
    data: Record<string, unknown>;
    index: number;
};
export type TableState = Pick<State, 'focusedIndex' | 'visibleFromIndex' | 'visibleToIndex'> & {
    /**
     * Visible rows.
     */
    visibleRows: Row[];
    /**
     * Focus next row and scroll the table down, if needed.
     */
    focusNextRow: () => void;
    /**
     * Focus previous row and scroll the table up, if needed.
     */
    focusPreviousRow: () => void;
};
export declare const useTableState: ({ visibleRowCount, rows }: UseTableStateProps) => {
    focusedIndex: number;
    visibleFromIndex: number;
    visibleToIndex: number;
    visibleRows: {
        data: Record<string, unknown>;
        index: number;
    }[];
    focusNextRow: () => void;
    focusPreviousRow: () => void;
};
export {};
