import { type Option } from './types.js';
type State = {
    /**
     * Limit how many options can be visible at a time.
     */
    limit: number;
    /**
     * Total number of options.
     */
    size: number;
    /**
     * Index of the currently focused option.
     */
    focusedIndex: number;
    /**
     * Index of the first visible option.
     */
    visibleFromIndex: number;
    /**
     * Index of the last visible option.
     */
    visibleToIndex: number;
    /**
     * Index of the selected option.
     */
    selectedIndex: number | undefined;
};
export type UseSelectStateProps = {
    /**
     * Number of items to display.
     */
    defaultLimit?: number;
    /**
     * Options.
     */
    options: Option[];
    /**
     * Initially selected option's value.
     */
    defaultValue?: string;
    /**
     * Callback for selecting an option.
     */
    onChange: (value: string) => void;
};
export type SelectState = Pick<State, 'focusedIndex' | 'visibleFromIndex' | 'visibleToIndex'> & {
    /**
     * Visible options.
     */
    visibleOptions: Array<Option & {
        index: number;
    }>;
    /**
     * Focus next option and scroll the list down, if needed.
     */
    focusNextOption: () => void;
    /**
     * Focus previous option and scroll the list up, if needed.
     */
    focusPreviousOption: () => void;
    /**
     * Select currently focused option.
     */
    selectFocusedOption: () => void;
};
export declare const useSelectState: ({ defaultLimit, options, defaultValue, onChange, }: UseSelectStateProps) => {
    focusedIndex: number;
    visibleFromIndex: number;
    visibleToIndex: number;
    selectedIndex: number | undefined;
    visibleOptions: {
        index: number;
        label: string;
        value: string;
    }[];
    focusNextOption: () => void;
    focusPreviousOption: () => void;
    selectFocusedOption: () => void;
};
export {};
